
/*
const foodILike = [
  {
    id:1,
    name: "Kimchi",
    image:
      "http://aeriskitchen.com/wp-content/uploads/2008/09/kimchi_bokkeumbap_02-.jpg",
    rating:4.9  
  },
  {
    id:2,
    name: "Samgyeopsal",
    image:
      "https://3.bp.blogspot.com/-hKwIBxIVcQw/WfsewX3fhJI/AAAAAAAAALk/yHxnxFXcfx4ZKSfHS_RQNKjw3bAC03AnACLcBGAs/s400/DSC07624.jpg",
    rating:5
  }
];

Food.propTypes = {
  name: PropTypes.string.isRequired,
  picture: PropTypes.string.isRequired,
  rating: PropTypes.number.isRequired

};
/*use propTypes to check the props - can use number , string, array, bool, symbol must use isRequired/
/*use dynamic component to generate components */
/*
function Food({name, picture, rating}){
  return <div>
    <h2> i like {name}</h2>
    <h4> {rating}/5 </h4>
    <img src = {picture} alt={name} />
    </div>
}

function App() {
  return (
    <div> 
      {foodILike.map(dish => (
        <Food 
          key = {dish.id } 
          name={dish.name} 
          picture={dish.image} 
          rating = {dish.rating}
          />
      ))}
      </div>
    );
}
*/
/*install npm i prop-types to double check props */
/*use id to provide a unique key */

/*use props to send data from apps to food, by the argument */
/*food component can send lots of 
props such as name kimchi or something as array, boolean */

※ Mounting- component의 태어남
▶ constructor()
-JS에서 class를 만들 때 호출되는 것
-coponent가 mount될 때 호출됨
▶ componentDidMount()-component가 처음 render될 때 호출됨

※ Updating
▶ componentDidUpdate()-coponet가 업데이트될 때 호출됨

※ Unmounting- coponent가 죽는 것
▶ componentWillUnmount()

setState()호출=>component 호출=>render 호출
=>업데이트 완료 후 coponentDidUpdate 실행

import React from 'react';
import PropTypes from "prop-types";
/*function name has to match component name */




/*state works with data that changes dynamically*/
class App extends React.Component{
  //constructor(props){
   // super(props);
   // console.log("hello");
 // }
  state = {
    count: 0 
  };
  add = () => {
    this.setState(current => ({count: current.count+1})) 
    //this.setState({count: this.state.count+1}) 
    /*not a recommended way to count using this.state.count */
    console.log("add")
  };
  minus = () => {
    this.setState(current => ({count:current.count-1}))
    console.log("minus")
  };
  componentDidMount(){
    console.log("compoenent rendered");
  }
  componentDidUpdate(){
    console.log(" i just updated")
  }
  render(){
    console.log("i am rendering");
    return (
      <div> 
        <h1> The number is: {this.state.count} </h1>
        <button onClick={this.add}> add</button>
        <button onClick={this.minus}> minus</button>
      </div>
    )
  }

}


export default App;